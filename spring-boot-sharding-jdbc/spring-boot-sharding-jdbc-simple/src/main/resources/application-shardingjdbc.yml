spring:
  props:
  ## sharding-jdbc 分片规则配置
  #数据源
  shardingsphere:
    datasource:
      names: m1,m2
      m1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/order_db_1?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
        username: root
        password: root
      m2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/order_db_2?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
        username: root
        password: root
    sharding:
      tables:
        t_order: ## 逻辑表名可以自定义，但是需要和代码中的表名称保持一致
          ## 水平分库策略配置 user_id 为分片键，分片策略为 user_id % 2 + 1, user_id 为偶数操作m1数据源，否则操作m2
          database-strategy:
            inline:
              sharding-column: user_id
              algorithm-expression: m$->{user_id % 2 + 1}
          ## 数据节点配置
          actual-data-nodes: m$->{1..2}.t_order_$->{1..2}
          # 配置自增主键生成器
          key-generator:
            column: order_id
            type: SNOWFLAKE
          ## 分片策略包括分片键和分片算法
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: t_order_$->{order_id % 2 + 1}
    props:
      ## 打开sql输出日志
      sql:
        show: true
